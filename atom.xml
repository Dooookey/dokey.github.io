<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dokey_</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-23T06:32:49.574Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dokey_</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django字段类型</title>
    <link href="http://example.com/2021/02/23/Django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/02/23/Django%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-02-23T02:57:18.000Z</published>
    <updated>2021-02-23T06:32:49.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-field-types介绍"><a href="#Django-field-types介绍" class="headerlink" title="Django field types介绍"></a>Django field types介绍</h1><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><h3 id="AutoField"><a href="#AutoField" class="headerlink" title="AutoField"></a>AutoField</h3><p>它是一个根据ID自增长的IntegerField字段。通常不必直接使用该字段。如果没在别的字段上指定主键，Django就会自动添加主键字段。</p><h3 id="BigIntegerField"><a href="#BigIntegerField" class="headerlink" title="BigIntegerField"></a>BigIntegerField</h3><p>64位整数，类似于<strong>IntegerField</strong>，范围从-9223372036854775808 到9223372036854775807。默认的form widget 是TextInput。</p><h3 id="BooleanField"><a href="#BooleanField" class="headerlink" title="BooleanField"></a>BooleanField</h3><p>一个布尔值(true/false)字段。<br>默认的form widget是CheckboxInput。<br>如果要使用null作为空值，可使用<strong>NullBooleanField</strong>。</p><h3 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a>CharField</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class CharField(max_length&#x3D;None[,**options])</span><br></pre></td></tr></table></figure><p>它是一个字符串字段，对小写字符和大写字符都适用。<br>CharField有一个必须传入的参数：max_length，字段的最大字符数。它作用于数据库层级和Django的数据验证层级。</p><h3 id="DateField"><a href="#DateField" class="headerlink" title="DateField"></a>DateField</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class DateField([auto_now&#x3D;False,auto_now_add&#x3D;False,**options])</span><br></pre></td></tr></table></figure><p>该字段利用Python的datetime.date实例来表示日期</p><ul><li>DateField.auto_now: 每一次保存对象时,Django都会自动将该字段的值设置为当前时间.一般用来表示”最后修改时间”.要注意使用的是当前日期,而非默认值,所以不能通过重写默认值的办法来改变保存时间.</li><li>DateField.auto_now_add: 在第一次创建对象时,Django都会自动将该字段的值设置为当前时间,一般用来表示对象创建时间.它使用的同样是当前日期,而非默认值.</li></ul><p>默认的form widget是TextInput。<br>Note:当auto_now或者auto_now_add设置为True时，字段会有editable=True和blank=True的设定。</p><h3 id="EmailField"><a href="#EmailField" class="headerlink" title="EmailField"></a>EmailField</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class EmailField([max_length&#x3D;75, **options])</span><br></pre></td></tr></table></figure><p>它是带有email合法性检测的CharField<br>Note: 最大长度默认为75,并不能存储所有与RFC3696/5321兼容的email地址,如果要存储所有,请设置max_length=254,设置为75是历史遗留问题</p><h3 id="FileField"><a href="#FileField" class="headerlink" title="FileField"></a>FileField</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class FileField(upload_to&#x3D;None[,max_length&#x3D;100,**options])</span><br></pre></td></tr></table></figure><p>文件上传字段<br>Note: 该字段不支持primary_key和unique参数,否则会抛出TypeError异常<br>它有一个必须的参数:<br><strong>FileField.upload_to</strong><br>用于保存文件的本地文件系统,它根据<strong>MEDIA_ROOT</strong>设置确定该文件的url属性.<br>该路径可以包含时间格式串strftime(),可以在上传文件的时候替换成当时日期/时间(这样就不会出现在上传文件把某个目录塞满的情况了)<br>该参数也可以是一个可调用项,比如是一个函数,可以调用函数获得包含文件名的上传路径,这个可调用项必须要接收两个参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django-field-types介绍&quot;&gt;&lt;a href=&quot;#Django-field-types介绍&quot; class=&quot;headerlink&quot; title=&quot;Django field types介绍&quot;&gt;&lt;/a&gt;Django field types介绍&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-07</title>
    <link href="http://example.com/2021/02/22/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-07/"/>
    <id>http://example.com/2021/02/22/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-07/</id>
    <published>2021-02-22T14:22:00.000Z</published>
    <updated>2021-02-23T08:41:20.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Admin-管理工具"><a href="#Django-Admin-管理工具" class="headerlink" title="Django Admin 管理工具"></a>Django Admin 管理工具</h1><p>Django自动管理工具是django.contrib的一部分。可以在项目的settings.py中的INSTALLED_APPS设置：</p><h3 id="settings-py-文件代码"><a href="#settings-py-文件代码" class="headerlink" title="settings.py 文件代码"></a>settings.py 文件代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="激活管理工具"><a href="#激活管理工具" class="headerlink" title="激活管理工具"></a>激活管理工具</h2><p>通常在生成项目时会在urls.py中自动设置好<br>配置项如下所示：</p><h3 id="urls-py-文件代码"><a href="#urls-py-文件代码" class="headerlink" title="urls.py 文件代码"></a>urls.py 文件代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r&#x27;amdin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用管理工具"><a href="#使用管理工具" class="headerlink" title="使用管理工具"></a>使用管理工具</h2><p>通过命令<strong>python manage.py createsuperuser</strong>来创建超级用户。<br>为了让admin界面管理某个数据模型，需要先注册该数据模型到admin。</p><h4 id="admin-py-文件代码"><a href="#admin-py-文件代码" class="headerlink" title="admin.py 文件代码"></a>admin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"></span><br><span class="line">admin.site.register(Test)</span><br></pre></td></tr></table></figure><h2 id="复杂模型"><a href="#复杂模型" class="headerlink" title="复杂模型"></a>复杂模型</h2><p>管理页面的功能强大,完全有能力处理更加复杂的数据模型;在models.py中增加一个更复杂的数据模型\</p><h4 id="models-py-文件代码"><a href="#models-py-文件代码" class="headerlink" title="models.py 文件代码"></a>models.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    emali = models.EmailField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 作用:美化打印出来的结果</span></span><br><span class="line">    <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    contact = models.ForeignKey(Contact, on_delete=models.CASCADE,)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> slef.name</span><br></pre></td></tr></table></figure><p>这里有两个表,Tag以Contact为外部键,一个Contact可以对应多个Tag.<br>IntegerField用于存储整数<br><strong>在admin.py中注册多个模型并显示</strong></p><h4 id="admin-py-文件代码-1"><a href="#admin-py-文件代码-1" class="headerlink" title="admin.py 文件代码"></a>admin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test, Tag, Contact</span><br><span class="line"></span><br><span class="line">amdin.site.register([Test, Contact, Tag])</span><br></pre></td></tr></table></figure><h3 id="使用以下命令来创建表结构"><a href="#使用以下命令来创建表结构" class="headerlink" title="使用以下命令来创建表结构"></a>使用以下命令来创建表结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations Testmodel</span><br><span class="line">$ python manage.py migrate TestModel <span class="comment">#创建表结构</span></span><br></pre></td></tr></table></figure><h2 id="自定义表单"><a href="#自定义表单" class="headerlink" title="自定义表单"></a>自定义表单</h2><p>自定义管理页面: 在”add”页面只想显示name和email部分,修改admin.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from TestModel.models import Test, Contact, Tag</span><br><span class="line"></span><br><span class="line">class ContactAdmin(admin.ModelAdmin):</span><br><span class="line">fields &#x3D; (&#39;name&#39;,&#39;email&#39;)</span><br><span class="line">    </span><br><span class="line"> admin.site.register(Contact,ContactAdmin)</span><br><span class="line"> admin.site.register([Test, Tag])</span><br></pre></td></tr></table></figure><p>以上代码定义了一个ContactAdmin类,用以说明管理页面的显示格式.<br>里面的fields属性定义了要显示的字段.<br>由于该类对应的是Contact数据模型,在注册时也需要将它们一起注册.</p><h3 id="输入分栏块-每个栏块也可以定义自己的格式"><a href="#输入分栏块-每个栏块也可以定义自己的格式" class="headerlink" title="输入分栏块,每个栏块也可以定义自己的格式"></a>输入分栏块,每个栏块也可以定义自己的格式</h3><h4 id="admin-py-文件代码-2"><a href="#admin-py-文件代码-2" class="headerlink" title="admin.py 文件代码"></a>admin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test, Contact, Tag</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactAdmin</span>(<span class="params">amdin.ModelAdmin</span>):</span></span><br><span class="line">fieldsets = (</span><br><span class="line">    [<span class="string">&#x27;Main&#x27;</span>,&#123;</span><br><span class="line">    <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">    &#125;],</span><br><span class="line">    [<span class="string">&#x27;Advance&#x27;</span>,&#123;</span><br><span class="line">    <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;age&#x27;</span>,),</span><br><span class="line">    &#125;]</span><br><span class="line">   )</span><br><span class="line">admin.site.register(Contact, ContactAdmin)</span><br><span class="line">admin.site.register([Test, Tag])</span><br></pre></td></tr></table></figure><h2 id="内联-Inline-显示"><a href="#内联-Inline-显示" class="headerlink" title="内联(Inline)显示"></a>内联(Inline)显示</h2><p>上面的Contact是Tag的外部键,所以有外部参考的关系<br>在默认的页面显示中,将两者分离开来,无法体现出两者的从属关系,我们可以使用内联显示,让Tag附加在Contact的编辑页面显示.</p><h4 id="admin-py-文件代码-3"><a href="#admin-py-文件代码-3" class="headerlink" title="admin.py 文件代码"></a>admin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test, Contact, Tag</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">   <span class="comment"># TabularInline类用于在A页面上编辑B表的字段</span></span><br><span class="line">model = Tag</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">   inlines = [TagInline] <span class="comment"># Inline</span></span><br><span class="line">   fieldsets = (</span><br><span class="line">       [<span class="string">&#x27;Main&#x27;</span>,&#123;</span><br><span class="line">           <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">       &#125;],</span><br><span class="line">       [<span class="string">&#x27;Advence&#x27;</span>,&#123;</span><br><span class="line">           <span class="string">&#x27;classes&#x27;</span>:(<span class="string">&#x27;collapse&#x27;</span>,),</span><br><span class="line">           <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;age&#x27;</span>,),</span><br><span class="line">       &#125;]</span><br><span class="line">   )</span><br><span class="line">admin.site.register(Contact, ContactAdmin)</span><br><span class="line">admin.site.register([Test])</span><br></pre></td></tr></table></figure><h2 id="列表页显示"><a href="#列表页显示" class="headerlink" title="列表页显示"></a>列表页显示</h2><p>自定义页面的显示,比如在列表中显示更多的栏目,子需要在ContactAdmin中增加list_display属性:</p><h4 id="admin-py-文件代码-4"><a href="#admin-py-文件代码-4" class="headerlink" title="admin.py 文件代码"></a>admin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test, Contact, Tag</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">    model = Tag</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display= (<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;email&quot;</span>)</span><br><span class="line">    inlines = [TagInline]</span><br><span class="line">    fieldsets = (</span><br><span class="line">        [<span class="string">&#x27;Main&#x27;</span>,&#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">        &#125;],</span><br><span class="line">        [<span class="string">&#x27;Advance&#x27;</span>,&#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>:(<span class="string">&#x27;collapse&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;age&#x27;</span>,),</span><br><span class="line">        &#125;]</span><br><span class="line">    )</span><br><span class="line">admin.site.register(Contact, ContactAdmin)</span><br><span class="line">admin.site.register([Test])</span><br></pre></td></tr></table></figure><p>搜索功能在管理大量记录时非常有用,可以使用search_fields为该列表页增加搜索栏:</p><h4 id="amdin-py-文件代码"><a href="#amdin-py-文件代码" class="headerlink" title="amdin.py 文件代码"></a>amdin.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test, Contact, Tag</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">    model = Tag</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line">    inlines = [TagInline]</span><br><span class="line">    fieldsets = (</span><br><span class="line">        [<span class="string">&#x27;Main&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">        &#125;],</span><br><span class="line">        [<span class="string">&#x27;Advance&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>:(<span class="string">&#x27;collapse&#x27;</span>,),</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>:(<span class="string">&#x27;age&#x27;</span>,),</span><br><span class="line">        &#125;]</span><br><span class="line">    )</span><br><span class="line">admin.site.register(Contact, ContactAdmin)</span><br><span class="line">admin.site.register([Test])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django-Admin-管理工具&quot;&gt;&lt;a href=&quot;#Django-Admin-管理工具&quot; class=&quot;headerlink&quot; title=&quot;Django Admin 管理工具&quot;&gt;&lt;/a&gt;Django Admin 管理工具&lt;/h1&gt;&lt;p&gt;Django自动管理</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-06</title>
    <link href="http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-06/"/>
    <id>http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-06/</id>
    <published>2021-02-20T15:03:00.000Z</published>
    <updated>2021-02-23T02:08:00.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-模型"><a href="#Django-模型" class="headerlink" title="Django 模型"></a>Django 模型</h1><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>创建MySQL数据库（ORM无法操作到数据库级别，只能操作到数据表）语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><h4 id="settings-py文件中DATABASES配置项："><a href="#settings-py文件中DATABASES配置项：" class="headerlink" title="settings.py文件中DATABASES配置项："></a>settings.py文件中DATABASES配置项：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,  <span class="comment">#数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,                <span class="comment">#数据库名称</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,             <span class="comment">#数据库地址</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,                <span class="comment">#数据库端口</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,                <span class="comment">#数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,            <span class="comment">#数据库密码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="使用pymysql模块连接mysql数据库："><a href="#使用pymysql模块连接mysql数据库：" class="headerlink" title="使用pymysql模块连接mysql数据库："></a>使用pymysql模块连接mysql数据库：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在与settings.py同级下的__init__.py中引入模块和进行配置</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><h3 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h3><p>Django规定，如果要使用模型，必须创建一个app，使用以下命令创建一个TestModel的app：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp TestModel</span><br></pre></td></tr></table></figure><h4 id="修改TestModel-models-py文件"><a href="#修改TestModel-models-py文件" class="headerlink" title="修改TestModel/models.py文件"></a>修改TestModel/models.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据库中的字段（name），数据类型则由CharField（相当于varchar）、Datefield（相当于datetime），max_length参数限定长度</p><h4 id="接下来需要在settings-py中的INSTALLED-APP中添加APP名称（TestModel）"><a href="#接下来需要在settings-py中的INSTALLED-APP中添加APP名称（TestModel）" class="headerlink" title="接下来需要在settings.py中的INSTALLED_APP中添加APP名称（TestModel）"></a>接下来需要在settings.py中的INSTALLED_APP中添加APP名称（TestModel）</h4><h4 id="在命令行中运行以下命令："><a href="#在命令行中运行以下命令：" class="headerlink" title="在命令行中运行以下命令："></a>在命令行中运行以下命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$python3 manage.py migrate  #创建表结构</span><br><span class="line">$python3 manage.py makemigrations  #迁移</span><br></pre></td></tr></table></figure><p>表名组成结构为：应用名_类名（如：TestModel_test）<br><strong>注意：</strong>尽管我们没有在models给表设置主键，但是Django会自动添加一个id作为主键。</p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views,testdb</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">&#x27;testdb/&#x27;</span>, testdb.testdb),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="添加数据（testdb-py）"><a href="#添加数据（testdb-py）" class="headerlink" title="添加数据（testdb.py）"></a>添加数据（testdb.py）</h4><p>添加数据需要先创建对象，然后再执行save函数，相当于SQL中的INSERT：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">test1 = Test(name = <span class="string">&#x27;Dokey&#x27;</span>)</span><br><span class="line">    test1.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取数据（testdb-py）"><a href="#获取数据（testdb-py）" class="headerlink" title="获取数据（testdb.py）"></a>获取数据（testdb.py）</h4><p>Django提供了多种方式来获取数据库的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testdb</span>(<span class="params">request</span>):</span></span><br><span class="line">   <span class="comment"># 初始化</span></span><br><span class="line">   response = <span class="string">&quot;&quot;</span></span><br><span class="line">   response1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM </span></span><br><span class="line">   <span class="built_in">list</span> = Test.objects.<span class="built_in">all</span>()</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># filter相当于SQL中的WHERE，可设置条件过滤结果</span></span><br><span class="line">   response2 = Test.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 获取单个对象</span></span><br><span class="line">   response3 = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 限制返回的数据 相当于SQL中的 OFFSET 0 LIMIT 2;</span></span><br><span class="line">   Test.objects.order_by(<span class="string">&#x27;name&#x27;</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 数据排序</span></span><br><span class="line">   Test.objects.order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 上面的方法可以连锁使用</span></span><br><span class="line">   Test.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;dokey&quot;</span>).order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 输出所有数据</span></span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">   response1 += var.name + <span class="string">&quot; &quot;</span></span><br><span class="line">    response = response1</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;&quot;</span> + response + <span class="string">&quot;&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>修改数据可以使用save()或update()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel,models <span class="keyword">import</span> Test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testdb</span>(<span class="params">request</span>):</span></span><br><span class="line">   test1 = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">   test1.name = <span class="string">&quot;Okay Dokey&quot;</span></span><br><span class="line">   test1.save()</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 第二种方式</span></span><br><span class="line">   Test.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(name=<span class="string">&quot;Okay Dokey yo&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 修改所有的列</span></span><br><span class="line">   Test.objects.<span class="built_in">all</span>().update(name=<span class="string">&quot;Dokey&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;修改成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>删除数据库中的对象只需调用该对象的delete()方法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testdb</span>(<span class="params">request</span>):</span></span><br><span class="line">tets1 = Test.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    test1.delete()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二种方式</span></span><br><span class="line">    Test.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).delete()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除所有数据</span></span><br><span class="line">    Test.objects.<span class="built_in">all</span>().delete()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;删除成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django-模型&quot;&gt;&lt;a href=&quot;#Django-模型&quot; class=&quot;headerlink&quot; title=&quot;Django 模型&quot;&gt;&lt;/a&gt;Django 模型&lt;/h1&gt;&lt;h2 id=&quot;数据库配置&quot;&gt;&lt;a href=&quot;#数据库配置&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-05</title>
    <link href="http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-05/"/>
    <id>http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-05/</id>
    <published>2021-02-20T09:05:42.000Z</published>
    <updated>2021-02-20T15:04:32.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-路由"><a href="#Django-路由" class="headerlink" title="Django 路由"></a>Django 路由</h1><p>路由简单来说就是根据用户请求的URL链接来判断对应的处理程序，并返回处理结果，也就是URL与Django的视图建立映射关系。<br>Django路由在urls.py配置，urls.py中的每一条配置对应相应的处理方法。</p><h4 id="Django-不同版本urls-py配置有点不一样："><a href="#Django-不同版本urls-py配置有点不一样：" class="headerlink" title="Django 不同版本urls.py配置有点不一样："></a>Django 不同版本urls.py配置有点不一样：</h4><h3 id="Django-1-1-x版本"><a href="#Django-1-1-x版本" class="headerlink" title="Django 1.1.x版本"></a>Django 1.1.x版本</h3><p><strong>url()方法：</strong>普通路径和正则路径均可使用，需要自己手动添加正则首位限制符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">url(r&#39;^%admin&#x2F;$&#39;, admin.site.urls),</span><br><span class="line">   url(r&#39;^index&#x2F;$&#39;, views.index), #普通路径</span><br><span class="line">        url(r&#39;^articles&#x2F;([0-9]&#123;4&#125;)&#x2F;$&#39;, views.articles) #正则路径</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Django-2-2-x之后的版本"><a href="#Django-2-2-x之后的版本" class="headerlink" title="Django 2.2.x之后的版本"></a>Django 2.2.x之后的版本</h3><ul><li>path：用于普通路径，不需要自己手动添加正则首位限制符号，底层已经添加。</li><li>re_path:用于正则路径，需要自己手动添加正则首位限制符号。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import re_path</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;index&#x2F;&#39;,views.index), #普通路径</span><br><span class="line">    re_path(r&#39;^articles&#x2F;[0-9]&#123;4&#125;&#x2F;$&#39;, views.articles), #正则路径</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>*总结：**Django1.1.x版本中的url和Django2.2.x版本中的re_path用法相同。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django-路由&quot;&gt;&lt;a href=&quot;#Django-路由&quot; class=&quot;headerlink&quot; title=&quot;Django 路由&quot;&gt;&lt;/a&gt;Django 路由&lt;/h1&gt;&lt;p&gt;路由简单来说就是根据用户请求的URL链接来判断对应的处理程序，并返回处理结果，也就是</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-04</title>
    <link href="http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-04/"/>
    <id>http://example.com/2021/02/20/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-04/</id>
    <published>2021-02-20T06:46:39.000Z</published>
    <updated>2021-02-20T09:00:09.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django视图"><a href="#Django视图" class="headerlink" title="Django视图"></a>Django视图</h1><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><p>视图函数简称视图，是一个简单Python函数，它接受Web请求并且返回Web响应。<br>响应可以是一个HTML页面、一个404错误页面、重定向页面、XML文档。<br>每个视图函数都负责返回一个HttpResponse对象，对象中包含生成的响应。</p><p>视图层中有两个重要的对象：请求对象（request）与响应对象（HttpResponse）。</p><h3 id="请求对象：HttpRequest对象（简称request对象）"><a href="#请求对象：HttpRequest对象（简称request对象）" class="headerlink" title="请求对象：HttpRequest对象（简称request对象）"></a>请求对象：HttpRequest对象（简称request对象）</h3><ol><li><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4>数据类型是QueryDict,一个类似于字典的对象，包含HTTP GET的所有参数。<br>取值格式：<strong>对象.方法</strong><br> <strong>get()：</strong>返回字符串，如果该键对应有多个值，取出该键的最后一个值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name &#x3D; request.GET.get(&quot;name&quot;)</span><br><span class="line">   return HttpResponse(&#39;姓名：&#123;&#125;&#39;.format(name))</span><br></pre></td></tr></table></figure></li><li><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4>常用于form表单，form表单里的标签name属性对应参数的键，value属性对应参数的值<br>取值格式：<strong>对象.方法</strong><br> <strong>get()：</strong>返回字符串，如果该键对应有多个值，取出该键的最后一个值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name &#x3D; request.POST.get(&quot;name&quot;)</span><br><span class="line">   return HttpResponse(&quot;姓名：&#123;&#125;&quot;.format(&quot;name&quot;))</span><br></pre></td></tr></table></figure></li><li><h4 id="body"><a href="#body" class="headerlink" title="body"></a>body</h4>数据类型是二进制字节流，是原生请求体里的参数内容，在HTTP中用于POST，因为GET没有请求体。<br>在处理非HTTP形式的报文时非常有用，例如：二进制图片、XML、Json等。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name request.body</span><br><span class="line">   print(name)</span><br><span class="line">   return HttpResponse(&quot;Okay Dokey&quot;)</span><br></pre></td></tr></table></figure></li><li><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4>获取URL中的路径部分，数据类型是字符串。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name &#x3D; request.path</span><br><span class="line">   print(name)</span><br><span class="line">   return HttpResponse(&quot;Okay Dokey&quot;)</span><br></pre></td></tr></table></figure></li><li><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4>获取当前请求的方式，数据类型是字符串，且结果为大写。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name &#x3D; request.method</span><br><span class="line">   print(name)</span><br><span class="line">   return HttpResponse(&quot;Okay Dokey&quot;)</span><br></pre></td></tr></table></figure><h3 id="响应对象：HttpResponse对象"><a href="#响应对象：HttpResponse对象" class="headerlink" title="响应对象：HttpResponse对象"></a>响应对象：HttpResponse对象</h3>响应对象主要有三种形式：HttpResponse()、render()、redirect()。<br> <strong>HttpResponse()：</strong>返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有html标签，也可以渲染。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">return HttpResponse(&quot;&lt;a herf&#x3D;&#39;https:&#x2F;&#x2F;www.baidu.com&#39;&gt;Okay Dokey&lt;&#x2F;a&gt;&quot;)</span><br></pre></td></tr></table></figure>   <strong>render()：</strong>返回文本，第一个参数为request，第二个参数为字符串（页面名称）,第三个参数为字典（可选参数，向页面传递的参数：键为页面参数名，值为views参数名）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">name &#x3D; &quot;Okay Dokey&quot;</span><br><span class="line">    return render(request, &#39;runoob.html&#39;, &#123;&quot;name&quot;: name&#125;)</span><br></pre></td></tr></table></figure>   <strong>redirect：</strong>重定向，跳转新页面。参数为字符串，字符串中填写页面路径。一般用于form表单提交后，跳转到新页面。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def runoob(request):</span><br><span class="line">return redirect(&quot;&#x2F;index&#x2F;&quot;)</span><br></pre></td></tr></table></figure><br>render和redirect是在HttpResponse的基础上进行了封装：</li></ol><ul><li>render：底层返回的也是HttpResponse对象</li><li>redirect:底层继承的是HttpResponse对象</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django视图&quot;&gt;&lt;a href=&quot;#Django视图&quot; class=&quot;headerlink&quot; title=&quot;Django视图&quot;&gt;&lt;/a&gt;Django视图&lt;/h1&gt;&lt;h2 id=&quot;视图层&quot;&gt;&lt;a href=&quot;#视图层&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-03</title>
    <link href="http://example.com/2021/02/19/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-03/"/>
    <id>http://example.com/2021/02/19/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-03/</id>
    <published>2021-02-19T09:06:44.000Z</published>
    <updated>2021-02-20T03:21:19.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django表单"><a href="#Django表单" class="headerlink" title="Django表单"></a>Django表单</h1><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><p>HTTP协议以”请求 - 回复”的方式工作。客户发送请求时，可以在请求中附加数据。服务器通过解析请求，就可以获得客户传来的数据，并根据URL来提供特定的服务</p><h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>视图显示（search_form.html）和请求处理分成两个函数（search_form、search）处理</p><h4 id="search-py-文件代码"><a href="#search-py-文件代码" class="headerlink" title="search.py 文件代码"></a>search.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HTTPResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_form</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;search_form.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">request</span>):</span></span><br><span class="line">request.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;q&#x27;</span> <span class="keyword">in</span> request.GET <span class="keyword">and</span> request.GET[<span class="string">&#x27;q&#x27;</span>]:</span><br><span class="line">        message = <span class="string">&quot;你搜索的内容为：&quot;</span> + request.GET[<span class="string">&#x27;q&#x27;</span>]</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">        message = <span class="string">&quot;你提交了空表单&quot;</span></span><br><span class="line">       <span class="keyword">return</span> HTTPResponse(message)</span><br><span class="line">          </span><br></pre></td></tr></table></figure><h4 id="templates-search-form-html"><a href="#templates-search-form-html" class="headerlink" title="templates/search_form.html"></a>templates/search_form.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Okay Dokey yo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/search/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Tips：</em>action属性规定当提交表单时，向何处发送表单数据。</p><h4 id="urls-py-文件代码"><a href="#urls-py-文件代码" class="headerlink" title="urls.py 文件代码"></a>urls.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views,search</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r&#x27;^search_form/$&#x27;</span>, search.search_form)</span><br><span class="line">    url(<span class="string">r&#x27;^search/$&#x27;</span>, search.search)</span><br><span class="line">       <span class="comment">#path(&#x27;search_form/&#x27;, search.search_form)</span></span><br><span class="line">       <span class="comment">#path(&#x27;search/&#x27;, search.search)</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>并用一个URL和处理函数，同时显示视图和处理请求。</p><h4 id="templates-search-post-html"><a href="#templates-search-post-html" class="headerlink" title="templates/search_post.html"></a>templates/search_post.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dokey<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/search_post/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      &#123;% csrf_token %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;rlt&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模板的末尾，增加一个rlt记号，为表格处理结果预留位置。<br>表格后面有一个{csrf_token}标签。这是Django提供的防止伪装提交请求的功能。POST方法提交的表格，必须有此标签。</p><h4 id="search-post-py-文件代码"><a href="#search-post-py-文件代码" class="headerlink" title="search_post.py 文件代码"></a>search_post.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.decorators <span class="keyword">import</span> csrf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_post</span>(<span class="params">request</span>):</span></span><br><span class="line">ctx = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.POST:</span><br><span class="line">    ctx[<span class="string">&#x27;rlt&#x27;</span>] = request.POST[<span class="string">&#x27;q&#x27;</span>]</span><br><span class="line">     <span class="keyword">return</span> render(request, <span class="string">&#x27;search_post.html&#x27;</span>, ctx)</span><br></pre></td></tr></table></figure><h4 id="urls-py-文件代码-1"><a href="#urls-py-文件代码-1" class="headerlink" title="urls.py 文件代码"></a>urls.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views,search_post</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">r&#x27;^search_post/$&#x27;</span>, search_post.search_post)</span><br><span class="line">    <span class="comment">#path(&quot;search_post.html&quot;, search_post.search_post)</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><em>Tips：</em>使用path()亦可，在search_post.html中form标签action属性中指定值为/search_post/时会报404错误，所以使用url()。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django表单&quot;&gt;&lt;a href=&quot;#Django表单&quot; class=&quot;headerlink&quot; title=&quot;Django表单&quot;&gt;&lt;/a&gt;Django表单&lt;/h1&gt;&lt;h2 id=&quot;HTTP-请求&quot;&gt;&lt;a href=&quot;#HTTP-请求&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Djange学习笔记-02</title>
    <link href="http://example.com/2021/02/08/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02/"/>
    <id>http://example.com/2021/02/08/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-02/</id>
    <published>2021-02-08T09:17:00.000Z</published>
    <updated>2021-02-09T07:55:31.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django模板标签"><a href="#Django模板标签" class="headerlink" title="Django模板标签"></a>Django模板标签</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">view: &#123;&quot;HTML变量名&quot; ：&quot;views变量名&quot;&#125;</span></span><br><span class="line"><span class="xml">HTML: </span><span class="template-variable">&#123;&#123;变量名&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="views-py-文件代码"><a href="#views-py-文件代码" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_name = <span class="string">&quot;okay dokey yo!&quot;</span></span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;name&quot;</span>:views_name&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中的runoob-html"><a href="#templates中的runoob-html" class="headerlink" title="templates中的runoob.html"></a>templates中的runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;name&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>templates中的runoob.html中，可以用.索引下标取出对应的元素</p><h4 id="views-py-文件代码-1"><a href="#views-py-文件代码-1" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_list = [<span class="string">&quot;okay&quot;</span>, <span class="string">&quot;dokey&quot;</span>, <span class="string">&quot;yo&quot;</span>]</span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_list&quot;</span>: views_list&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中的runoob-html-1"><a href="#templates中的runoob-html-1" class="headerlink" title="templates中的runoob.html"></a>templates中的runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;views_list&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;views_list.1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>templates中的runoob.html中，可以用 <strong>.键</strong> 取出对应的值</p><h4 id="views-py-文件代码-2"><a href="#views-py-文件代码-2" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_dict = &#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;okay dokey&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_dict&quot;</span>:views_dict&#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="templates中的runoob-html-2"><a href="#templates中的runoob-html-2" class="headerlink" title="templates中的runoob.html"></a>templates中的runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;views_dict&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;views_dict.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>模板语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量名|过滤器:可选参数&#125;&#125;</span><br></pre></td></tr></table></figure><p>模板过滤器可以在变量被现实前修改它,过滤器使用管道字符:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;name|lower&#125;&#125;</span><br><span class="line">#&#123;&#123;name&#125;&#125;变量被过滤器lower处理后,文档大写转换文本成小写</span><br></pre></td></tr></table></figure><p>过滤管道可以被<strong>套接</strong> ,一个过滤管道的输出又可以作为下一个管道的输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;my_list|first|upper&#125;&#125;</span><br><span class="line">#将第一个元素转化为大写</span><br></pre></td></tr></table></figure><p>过滤器的参数跟随冒号之后并且总是以双引号包含:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;bio|truncatewords:&quot;30&quot;&#125;&#125;</span><br><span class="line">#显示变量bio前30个词</span><br></pre></td></tr></table></figure><p><strong>其他过滤器:</strong></p><ul><li>addslashes:添加反斜杠到任何反斜杠\单引号或者双引号前面</li><li>date:按指定的格式字符串参数格式化date或者datetime对象:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   &#123;&#123;pub_date|date:&quot;F j, Y&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li>length:返回变量的长度</li></ul><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>default为变量提供一个默认值<br>如果views传的变量的布尔值是false,则使用指定的默认值<br>以下值为false:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0.0 False 0j &quot;&quot; [] () set() &#123;&#125; None    </span><br></pre></td></tr></table></figure><h4 id="views-py-文件代码-3"><a href="#views-py-文件代码-3" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_name = <span class="number">0</span></span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_name&quot;</span>: views_name&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runobb-html"><a href="#templates中runobb-html" class="headerlink" title="templates中runobb.html"></a>templates中runobb.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;views_name|default:&quot;okay dokey&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>返回对象的长度,适用于字符串和列表<br>字典返回的键值对的数量,集合返回的是去重后的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_name = <span class="string">&quot;okay dokey&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_name&quot;</span>: views_name&#125;)</span><br></pre></td></tr></table></figure><h4 id="templatest中runoob-html"><a href="#templatest中runoob-html" class="headerlink" title="templatest中runoob.html"></a>templatest中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;views_name|length&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a>filesizeformat</h3><p>以更易读的方式显示文件的大小(即’13 KB’,’5 MB’,’10 bytes’等)<br>字典返回的是键值对的数量,集合返回的是去重后的长度</p><h4 id="views-py-文件代码-4"><a href="#views-py-文件代码-4" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">num = <span class="number">1024</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;num&quot;</span>: num&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runoob-html"><a href="#templates中runoob-html" class="headerlink" title="templates中runoob.html"></a>templates中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;num|filesizeformat&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>根据给定格式对一个日期变量进行格式化<br>格式<strong>Y-m-d H:i:s</strong>返回<strong>年-月-日 小时-分钟-秒</strong>的格式时间</p><h4 id="views-py-文件代码-5"><a href="#views-py-文件代码-5" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="keyword">import</span> datemite</span><br><span class="line">   now = datetime.datetime.now()</span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;now&quot;</span>:now&#125;)</span><br></pre></td></tr></table></figure><h4 id="templatest中runoob-html-1"><a href="#templatest中runoob-html-1" class="headerlink" title="templatest中runoob.html"></a>templatest中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;now|date:&quot;Y-m-d&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="truncatechars"><a href="#truncatechars" class="headerlink" title="truncatechars"></a>truncatechars</h3><p>如果字符串包含的字符总个数多于指定的字符数量,那么会被截断掉后面的部分.<br>截断的字符串将以 <strong>…</strong> 结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_name = <span class="string">&#x27;okay dokey&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_name&quot;</span>: views_name&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runoob-html-1"><a href="#templates中runoob-html-1" class="headerlink" title="templates中runoob.html"></a>templates中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;views_name|truncatechars:2&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h3><p>将字符串标记为安全,不需要转义<br>要保证views.py传过来的数据绝对安全,才能用safe<br>和后端views.py的make_safe效果相同.<br>Django会自动对views.py传到HTML文件中的标签语法进行转义,令其语义失效.加safe过滤器是告诉Django该数据是安全的,不必对其进行转义,可以让该数据语义生效.</p><h4 id="views-py-文件代码-6"><a href="#views-py-文件代码-6" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_str = <span class="string">&#x27;&lt;a herf=&quot;https://www.baidu.com&quot;&gt;点击跳转&lt;/a&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;&#123;<span class="string">&quot;views_str&quot;</span>: views_str&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runoob-html-2"><a href="#templates中runoob-html-2" class="headerlink" title="templates中runoob.html"></a>templates中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;views_str|safe&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else标签"><a href="#if-else标签" class="headerlink" title="if/else标签"></a>if/else标签</h3><p>基本语法格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition %&#125;</span><br><span class="line">...display</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition1 %&#125;</span><br><span class="line">...display</span><br><span class="line">&#123;% elif condiion2 %&#125;</span><br><span class="line">...display</span><br><span class="line"> &#123;% else %&#125;</span><br><span class="line"> ...display</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>根据条件判断是否输出.if/else支持嵌套</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if %&#125;标签接受and, or或者not关键字来对多个变量做判断,或者对变量取反(not)</span><br><span class="line"></span><br><span class="line">&#123;% if athlete_list and coach_list %&#125;</span><br><span class="line">athletes 和 coaches 变量都是可用.</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="views-py文件代码"><a href="#views-py文件代码" class="headerlink" title="views.py文件代码"></a>views.py文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runobb</span>(<span class="params">request</span>):</span></span><br><span class="line">num = <span class="number">80</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runobb.html&#x27;</span>, &#123;<span class="string">&quot;num&quot;</span>: num&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runoob-html-3"><a href="#templates中runoob-html-3" class="headerlink" title="templates中runoob.html"></a>templates中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;%if num&gt;90 and num&lt;=100 %&#125;</span><br><span class="line">优秀</span><br><span class="line">&#123;%elif num&gt;60 and num&lt;=90 %&#125;</span><br><span class="line">合格</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">GG</span><br><span class="line">&#123;% endif %&#125;                        </span><br></pre></td></tr></table></figure><h3 id="for标签"><a href="#for标签" class="headerlink" title="for标签"></a>for标签</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for %&#125;允许我们在一个序列上迭代</span><br><span class="line">与Python的for语句情形类似,循坏语法是for X in Y, Y是要迭代的序列而X是在每一个特定的循坏中使用的变量名称.</span><br><span class="line">每一次循环中,模板系统会渲染在&#123;% for %&#125;和&#123;% endfor %&#125;之间的所有内容.</span><br></pre></td></tr></table></figure><h4 id="views-py-文件代码-7"><a href="#views-py-文件代码-7" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">views_list = [<span class="string">&#x27;okay&#x27;</span>, <span class="string">&#x27;dokey&#x27;</span>, <span class="string">&#x27;yo&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, &#123;<span class="string">&quot;views_list&quot;</span>: views_list&#125;)</span><br></pre></td></tr></table></figure><h4 id="templatest中runoob-html-2"><a href="#templatest中runoob-html-2" class="headerlink" title="templatest中runoob.html"></a>templatest中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in views_list%&#125;</span><br><span class="line">&#123;&#123;i&#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>给标签增加一个reversed使得该列表被反向迭代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in views_list %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;</span><br><span class="line">&#123;&#123;% endfor %&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>可以直接使用字典.items方法,用变量的解包分别获取键和值</p><h4 id="views-py-文件代码-8"><a href="#views-py-文件代码-8" class="headerlink" title="views.py 文件代码"></a>views.py 文件代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def runoob(request):</span><br><span class="line">views_dict &#x3D; &#123;&quot;name&quot;:&quot;dokey&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line">    return render(request, &#39;runoob.html&#39;, &#123;&quot;views_dict&quot;: views_dict&#125;)</span><br></pre></td></tr></table></figure><h4 id="templates中runoob-html-4"><a href="#templates中runoob-html-4" class="headerlink" title="templates中runoob.html"></a>templates中runoob.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i,j in views_dict.items %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125; ---- &#123;&#123; j &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>在for标签里可以通过forloop变量获取循环序号</p><ul><li>forloop.counter:顺序获取循环序号,从1开始计算</li><li>forloop.conter():顺序获取循环序号,从0开始计算</li><li>forloop.revcounter:倒序获取循环序号,结尾序号为1</li><li>forloop.revcounter():倒序获取循环序号,结尾序号为0</li><li>forloop.first:第一条数据返回True,其他数据返回False</li><li>forloop.last:最后一条数据返回True,其他数据返回False</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Django模板标签&quot;&gt;&lt;a href=&quot;#Django模板标签&quot; class=&quot;headerlink&quot; title=&quot;Django模板标签&quot;&gt;&lt;/a&gt;Django模板标签&lt;/h1&gt;&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django学习笔记-01</title>
    <link href="http://example.com/2021/02/08/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/"/>
    <id>http://example.com/2021/02/08/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/</id>
    <published>2021-02-08T03:30:00.000Z</published>
    <updated>2021-02-08T09:39:44.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-path-函数"><a href="#Django-path-函数" class="headerlink" title="Django path()函数"></a>Django path()函数</h2><p> Path()函数可以接收四个参数，分别是两个必选参数:router、view和两个可选参数:kwargs、name</p><p> path(router, view, kwargs=None, name=None)</p><ol><li>router:字符串,表示URL规则,与之匹配的URL会执行对应的第二个参数view.</li><li>view:用于执行与正则表达式匹配的URL请求.</li><li>kwargs:视图使用的字典类型的参数.</li><li>name:用来反向获取URL.</li> </li></ol><h2 id="Django-模板"><a href="#Django-模板" class="headerlink" title="Django 模板"></a>Django 模板</h2><ol><li>引用模板文件,修改settings.py;修改TEMPLATES中的DIRS为[os.path.join(BASE_DIR,’templates’)]<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>修改views.py,增加一个新对象,用于向模板提交数据:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">   context = &#123;&#125;</span><br><span class="line">    context[<span class="string">&#x27;hello&#x27;</span>] = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure></li><li>修改urls.py代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">   </span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">&#x27;runoob/&#x27;</span>, views.runoob)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2>使用<strong>render</strong>来替代<strong>HttpRequest; render</strong>使用一个字典<strong>context</strong>作为参数, <strong>context</strong>字典中元素的键值<strong>hello</strong>对应了模板HTML文件中的变量<strong>hello</strong>.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Django-path-函数&quot;&gt;&lt;a href=&quot;#Django-path-函数&quot; class=&quot;headerlink&quot; title=&quot;Django path()函数&quot;&gt;&lt;/a&gt;Django path()函数&lt;/h2&gt;&lt;p&gt; Path()函数可以接收四个参数，分别</summary>
      
    
    
    
    <category term="Django" scheme="http://example.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/02/06/hello-world/"/>
    <id>http://example.com/2021/02/06/hello-world/</id>
    <published>2021-02-05T16:22:00.000Z</published>
    <updated>2021-02-08T09:37:35.007Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
